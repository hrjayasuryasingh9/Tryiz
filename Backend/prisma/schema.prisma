generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DB_URL")
}

model users {
  id                 Int        @id @default(autoincrement())
  name               String     @db.VarChar(100)
  email              String     @unique @db.VarChar(255)
  phone_number       String?    @unique @db.VarChar(20)
  hashed_password    String
  verification_token String?    @db.VarChar(255)
  is_verified        Boolean?   @default(false)
  profile_pic        String?
  address            String?
  created_on         DateTime?  @default(now()) @db.Timestamp(6)
  cart               cart[]
  reviews            reviews[]
  wishlist           wishlist[]
}

model products {
  id           Int        @id @default(autoincrement())
  name         String     @db.VarChar(255)
  description  String?
  price        Decimal    @db.Decimal(10, 2)
  category     String     @db.VarChar(100)
  availability Boolean?   @default(true)
  cart         cart[]
  images       images[]
  reviews      reviews[]
  wishlist     wishlist[]
}

model images {
  id        Int       @id @default(autoincrement())
  pid       Int?
  image_url String
  products  products? @relation(fields: [pid], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model reviews {
  id         Int       @id @default(autoincrement())
  user_id    Int
  product_id Int
  stars      Int?
  review     String
  created_at DateTime? @default(now()) @db.Timestamp(6)
  products   products  @relation(fields: [product_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users      users     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model cart {
  id       Int       @id @default(autoincrement())
  uid      Int
  pid      Int
  quantity Int?      @default(1)
  added_at DateTime? @default(now()) @db.Timestamp(6)
  products products  @relation(fields: [pid], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users    users     @relation(fields: [uid], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model wishlist {
  id       Int       @id @default(autoincrement())
  uid      Int
  pid      Int
  added_at DateTime? @default(now()) @db.Timestamp(6)
  products products  @relation(fields: [pid], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users    users     @relation(fields: [uid], references: [id], onDelete: Cascade, onUpdate: NoAction)
}
